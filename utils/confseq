#!/usr/bin/env ocaml

(** Generat a conf file that consists of a sequence of mutation ratios.

    @author Sang Kil Cha <sangkil.cha\@gmail.com>
    @since  2014-03-19

 *)

(*
Copyright (c) 2014, Sang Kil Cha
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of the <organization> nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL SANG KIL CHA BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
*)

#load "str.cma";;

let load_file f =
  let ic = open_in f in
  let n = in_channel_length ic in
  let s = String.create n in
  really_input ic s 0 n;
  close_in ic;
  (s)

let gen template r_start r_end interval =
  let template = load_file template in
  let och = open_out "new.conf" in
  let rec loop r_start r_end =
    let r = r_start in
    let r = Printf.sprintf "%.3f" r in
    let s = Str.global_replace (Str.regexp_string "(ratio)") r template in
    Printf.printf "%f\n" r_start;
    if r_start >= r_end then begin
      output_string och s
    end else begin
      output_string och s;
      output_string och ",\n";
      loop (r_start +. interval) r_end
    end
  in
  output_string och "[\n";
  loop r_start r_end;
  output_string och "]\n";
  close_out och

let _ =
    gen Sys.argv.(1)
      (float_of_string Sys.argv.(2))
      (float_of_string Sys.argv.(3))
      (float_of_string Sys.argv.(4))

